/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftConnection_H
#define ThriftConnection_H

#include <thrift/TDispatchProcessor.h>
#include "thriftConnection_types.h"



class ThriftConnectionIf {
 public:
  virtual ~ThriftConnectionIf() {}
  virtual bool ping() = 0;
  virtual bool transmitBool(const bool value) = 0;
  virtual int8_t transmitByte(const int8_t value) = 0;
  virtual int16_t transmitInt16(const int16_t value) = 0;
  virtual int32_t transmitInt32(const int32_t value) = 0;
  virtual int64_t transmitInt64(const int64_t value) = 0;
  virtual double transmitDouble(const double value) = 0;
  virtual void transmitString(std::string& _return, const std::string& message) = 0;
  virtual void transmitStringToStringMap(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mapContainer) = 0;
  virtual void transmitInt32ToStringMap(std::map<int32_t, std::string> & _return, const std::map<int32_t, std::string> & mapContainer) = 0;
  virtual void sendBool(const bool value) = 0;
  virtual void sendByte(const int8_t value) = 0;
  virtual void sendInt16(const int16_t value) = 0;
  virtual void sendInt32(const int32_t value) = 0;
  virtual void sendInt64(const int64_t value) = 0;
  virtual void sendDouble(const double value) = 0;
  virtual void sendString(const std::string& message) = 0;
  virtual void sendStringToStringMap(const std::map<std::string, std::string> & mapContainer) = 0;
  virtual void sendInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer) = 0;
};

class ThriftConnectionIfFactory {
 public:
  typedef ThriftConnectionIf Handler;

  virtual ~ThriftConnectionIfFactory() {}

  virtual ThriftConnectionIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftConnectionIf* /* handler */) = 0;
};

class ThriftConnectionIfSingletonFactory : virtual public ThriftConnectionIfFactory {
 public:
  ThriftConnectionIfSingletonFactory(const boost::shared_ptr<ThriftConnectionIf>& iface) : iface_(iface) {}
  virtual ~ThriftConnectionIfSingletonFactory() {}

  virtual ThriftConnectionIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftConnectionIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftConnectionIf> iface_;
};

class ThriftConnectionNull : virtual public ThriftConnectionIf {
 public:
  virtual ~ThriftConnectionNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  bool transmitBool(const bool /* value */) {
    bool _return = false;
    return _return;
  }
  int8_t transmitByte(const int8_t /* value */) {
    int8_t _return = 0;
    return _return;
  }
  int16_t transmitInt16(const int16_t /* value */) {
    int16_t _return = 0;
    return _return;
  }
  int32_t transmitInt32(const int32_t /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t transmitInt64(const int64_t /* value */) {
    int64_t _return = 0;
    return _return;
  }
  double transmitDouble(const double /* value */) {
    double _return = (double)0;
    return _return;
  }
  void transmitString(std::string& /* _return */, const std::string& /* message */) {
    return;
  }
  void transmitStringToStringMap(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mapContainer */) {
    return;
  }
  void transmitInt32ToStringMap(std::map<int32_t, std::string> & /* _return */, const std::map<int32_t, std::string> & /* mapContainer */) {
    return;
  }
  void sendBool(const bool /* value */) {
    return;
  }
  void sendByte(const int8_t /* value */) {
    return;
  }
  void sendInt16(const int16_t /* value */) {
    return;
  }
  void sendInt32(const int32_t /* value */) {
    return;
  }
  void sendInt64(const int64_t /* value */) {
    return;
  }
  void sendDouble(const double /* value */) {
    return;
  }
  void sendString(const std::string& /* message */) {
    return;
  }
  void sendStringToStringMap(const std::map<std::string, std::string> & /* mapContainer */) {
    return;
  }
  void sendInt32ToStringMap(const std::map<int32_t, std::string> & /* mapContainer */) {
    return;
  }
};


class ThriftConnection_ping_args {
 public:

  ThriftConnection_ping_args() {
  }

  virtual ~ThriftConnection_ping_args() throw() {}


  bool operator == (const ThriftConnection_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftConnection_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_ping_pargs {
 public:


  virtual ~ThriftConnection_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_ping_result__isset {
  _ThriftConnection_ping_result__isset() : success(false) {}
  bool success;
} _ThriftConnection_ping_result__isset;

class ThriftConnection_ping_result {
 public:

  ThriftConnection_ping_result() : success(0) {
  }

  virtual ~ThriftConnection_ping_result() throw() {}

  bool success;

  _ThriftConnection_ping_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ThriftConnection_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_ping_presult__isset {
  _ThriftConnection_ping_presult__isset() : success(false) {}
  bool success;
} _ThriftConnection_ping_presult__isset;

class ThriftConnection_ping_presult {
 public:


  virtual ~ThriftConnection_ping_presult() throw() {}

  bool* success;

  _ThriftConnection_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitBool_args__isset {
  _ThriftConnection_transmitBool_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitBool_args__isset;

class ThriftConnection_transmitBool_args {
 public:

  ThriftConnection_transmitBool_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitBool_args() throw() {}

  bool value;

  _ThriftConnection_transmitBool_args__isset __isset;

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitBool_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitBool_pargs {
 public:


  virtual ~ThriftConnection_transmitBool_pargs() throw() {}

  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitBool_result__isset {
  _ThriftConnection_transmitBool_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitBool_result__isset;

class ThriftConnection_transmitBool_result {
 public:

  ThriftConnection_transmitBool_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitBool_result() throw() {}

  bool success;
  InvalidOperation e;

  _ThriftConnection_transmitBool_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitBool_presult__isset {
  _ThriftConnection_transmitBool_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitBool_presult__isset;

class ThriftConnection_transmitBool_presult {
 public:


  virtual ~ThriftConnection_transmitBool_presult() throw() {}

  bool* success;
  InvalidOperation e;

  _ThriftConnection_transmitBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitByte_args__isset {
  _ThriftConnection_transmitByte_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitByte_args__isset;

class ThriftConnection_transmitByte_args {
 public:

  ThriftConnection_transmitByte_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitByte_args() throw() {}

  int8_t value;

  _ThriftConnection_transmitByte_args__isset __isset;

  void __set_value(const int8_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitByte_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitByte_pargs {
 public:


  virtual ~ThriftConnection_transmitByte_pargs() throw() {}

  const int8_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitByte_result__isset {
  _ThriftConnection_transmitByte_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitByte_result__isset;

class ThriftConnection_transmitByte_result {
 public:

  ThriftConnection_transmitByte_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitByte_result() throw() {}

  int8_t success;
  InvalidOperation e;

  _ThriftConnection_transmitByte_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitByte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitByte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitByte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitByte_presult__isset {
  _ThriftConnection_transmitByte_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitByte_presult__isset;

class ThriftConnection_transmitByte_presult {
 public:


  virtual ~ThriftConnection_transmitByte_presult() throw() {}

  int8_t* success;
  InvalidOperation e;

  _ThriftConnection_transmitByte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitInt16_args__isset {
  _ThriftConnection_transmitInt16_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitInt16_args__isset;

class ThriftConnection_transmitInt16_args {
 public:

  ThriftConnection_transmitInt16_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitInt16_args() throw() {}

  int16_t value;

  _ThriftConnection_transmitInt16_args__isset __isset;

  void __set_value(const int16_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitInt16_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitInt16_pargs {
 public:


  virtual ~ThriftConnection_transmitInt16_pargs() throw() {}

  const int16_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt16_result__isset {
  _ThriftConnection_transmitInt16_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt16_result__isset;

class ThriftConnection_transmitInt16_result {
 public:

  ThriftConnection_transmitInt16_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitInt16_result() throw() {}

  int16_t success;
  InvalidOperation e;

  _ThriftConnection_transmitInt16_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitInt16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt16_presult__isset {
  _ThriftConnection_transmitInt16_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt16_presult__isset;

class ThriftConnection_transmitInt16_presult {
 public:


  virtual ~ThriftConnection_transmitInt16_presult() throw() {}

  int16_t* success;
  InvalidOperation e;

  _ThriftConnection_transmitInt16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitInt32_args__isset {
  _ThriftConnection_transmitInt32_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitInt32_args__isset;

class ThriftConnection_transmitInt32_args {
 public:

  ThriftConnection_transmitInt32_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitInt32_args() throw() {}

  int32_t value;

  _ThriftConnection_transmitInt32_args__isset __isset;

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitInt32_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitInt32_pargs {
 public:


  virtual ~ThriftConnection_transmitInt32_pargs() throw() {}

  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt32_result__isset {
  _ThriftConnection_transmitInt32_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt32_result__isset;

class ThriftConnection_transmitInt32_result {
 public:

  ThriftConnection_transmitInt32_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitInt32_result() throw() {}

  int32_t success;
  InvalidOperation e;

  _ThriftConnection_transmitInt32_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitInt32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt32_presult__isset {
  _ThriftConnection_transmitInt32_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt32_presult__isset;

class ThriftConnection_transmitInt32_presult {
 public:


  virtual ~ThriftConnection_transmitInt32_presult() throw() {}

  int32_t* success;
  InvalidOperation e;

  _ThriftConnection_transmitInt32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitInt64_args__isset {
  _ThriftConnection_transmitInt64_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitInt64_args__isset;

class ThriftConnection_transmitInt64_args {
 public:

  ThriftConnection_transmitInt64_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitInt64_args() throw() {}

  int64_t value;

  _ThriftConnection_transmitInt64_args__isset __isset;

  void __set_value(const int64_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitInt64_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitInt64_pargs {
 public:


  virtual ~ThriftConnection_transmitInt64_pargs() throw() {}

  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt64_result__isset {
  _ThriftConnection_transmitInt64_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt64_result__isset;

class ThriftConnection_transmitInt64_result {
 public:

  ThriftConnection_transmitInt64_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitInt64_result() throw() {}

  int64_t success;
  InvalidOperation e;

  _ThriftConnection_transmitInt64_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitInt64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt64_presult__isset {
  _ThriftConnection_transmitInt64_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt64_presult__isset;

class ThriftConnection_transmitInt64_presult {
 public:


  virtual ~ThriftConnection_transmitInt64_presult() throw() {}

  int64_t* success;
  InvalidOperation e;

  _ThriftConnection_transmitInt64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitDouble_args__isset {
  _ThriftConnection_transmitDouble_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_transmitDouble_args__isset;

class ThriftConnection_transmitDouble_args {
 public:

  ThriftConnection_transmitDouble_args() : value(0) {
  }

  virtual ~ThriftConnection_transmitDouble_args() throw() {}

  double value;

  _ThriftConnection_transmitDouble_args__isset __isset;

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const ThriftConnection_transmitDouble_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitDouble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitDouble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitDouble_pargs {
 public:


  virtual ~ThriftConnection_transmitDouble_pargs() throw() {}

  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitDouble_result__isset {
  _ThriftConnection_transmitDouble_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitDouble_result__isset;

class ThriftConnection_transmitDouble_result {
 public:

  ThriftConnection_transmitDouble_result() : success(0) {
  }

  virtual ~ThriftConnection_transmitDouble_result() throw() {}

  double success;
  InvalidOperation e;

  _ThriftConnection_transmitDouble_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitDouble_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitDouble_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitDouble_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitDouble_presult__isset {
  _ThriftConnection_transmitDouble_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitDouble_presult__isset;

class ThriftConnection_transmitDouble_presult {
 public:


  virtual ~ThriftConnection_transmitDouble_presult() throw() {}

  double* success;
  InvalidOperation e;

  _ThriftConnection_transmitDouble_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitString_args__isset {
  _ThriftConnection_transmitString_args__isset() : message(false) {}
  bool message;
} _ThriftConnection_transmitString_args__isset;

class ThriftConnection_transmitString_args {
 public:

  ThriftConnection_transmitString_args() : message() {
  }

  virtual ~ThriftConnection_transmitString_args() throw() {}

  std::string message;

  _ThriftConnection_transmitString_args__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ThriftConnection_transmitString_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitString_pargs {
 public:


  virtual ~ThriftConnection_transmitString_pargs() throw() {}

  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitString_result__isset {
  _ThriftConnection_transmitString_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitString_result__isset;

class ThriftConnection_transmitString_result {
 public:

  ThriftConnection_transmitString_result() : success() {
  }

  virtual ~ThriftConnection_transmitString_result() throw() {}

  std::string success;
  InvalidOperation e;

  _ThriftConnection_transmitString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitString_presult__isset {
  _ThriftConnection_transmitString_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitString_presult__isset;

class ThriftConnection_transmitString_presult {
 public:


  virtual ~ThriftConnection_transmitString_presult() throw() {}

  std::string* success;
  InvalidOperation e;

  _ThriftConnection_transmitString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitStringToStringMap_args__isset {
  _ThriftConnection_transmitStringToStringMap_args__isset() : mapContainer(false) {}
  bool mapContainer;
} _ThriftConnection_transmitStringToStringMap_args__isset;

class ThriftConnection_transmitStringToStringMap_args {
 public:

  ThriftConnection_transmitStringToStringMap_args() {
  }

  virtual ~ThriftConnection_transmitStringToStringMap_args() throw() {}

  std::map<std::string, std::string>  mapContainer;

  _ThriftConnection_transmitStringToStringMap_args__isset __isset;

  void __set_mapContainer(const std::map<std::string, std::string> & val) {
    mapContainer = val;
  }

  bool operator == (const ThriftConnection_transmitStringToStringMap_args & rhs) const
  {
    if (!(mapContainer == rhs.mapContainer))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitStringToStringMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitStringToStringMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitStringToStringMap_pargs {
 public:


  virtual ~ThriftConnection_transmitStringToStringMap_pargs() throw() {}

  const std::map<std::string, std::string> * mapContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitStringToStringMap_result__isset {
  _ThriftConnection_transmitStringToStringMap_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitStringToStringMap_result__isset;

class ThriftConnection_transmitStringToStringMap_result {
 public:

  ThriftConnection_transmitStringToStringMap_result() {
  }

  virtual ~ThriftConnection_transmitStringToStringMap_result() throw() {}

  std::map<std::string, std::string>  success;
  InvalidOperation e;

  _ThriftConnection_transmitStringToStringMap_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitStringToStringMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitStringToStringMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitStringToStringMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitStringToStringMap_presult__isset {
  _ThriftConnection_transmitStringToStringMap_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitStringToStringMap_presult__isset;

class ThriftConnection_transmitStringToStringMap_presult {
 public:


  virtual ~ThriftConnection_transmitStringToStringMap_presult() throw() {}

  std::map<std::string, std::string> * success;
  InvalidOperation e;

  _ThriftConnection_transmitStringToStringMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_transmitInt32ToStringMap_args__isset {
  _ThriftConnection_transmitInt32ToStringMap_args__isset() : mapContainer(false) {}
  bool mapContainer;
} _ThriftConnection_transmitInt32ToStringMap_args__isset;

class ThriftConnection_transmitInt32ToStringMap_args {
 public:

  ThriftConnection_transmitInt32ToStringMap_args() {
  }

  virtual ~ThriftConnection_transmitInt32ToStringMap_args() throw() {}

  std::map<int32_t, std::string>  mapContainer;

  _ThriftConnection_transmitInt32ToStringMap_args__isset __isset;

  void __set_mapContainer(const std::map<int32_t, std::string> & val) {
    mapContainer = val;
  }

  bool operator == (const ThriftConnection_transmitInt32ToStringMap_args & rhs) const
  {
    if (!(mapContainer == rhs.mapContainer))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt32ToStringMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt32ToStringMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_transmitInt32ToStringMap_pargs {
 public:


  virtual ~ThriftConnection_transmitInt32ToStringMap_pargs() throw() {}

  const std::map<int32_t, std::string> * mapContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt32ToStringMap_result__isset {
  _ThriftConnection_transmitInt32ToStringMap_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt32ToStringMap_result__isset;

class ThriftConnection_transmitInt32ToStringMap_result {
 public:

  ThriftConnection_transmitInt32ToStringMap_result() {
  }

  virtual ~ThriftConnection_transmitInt32ToStringMap_result() throw() {}

  std::map<int32_t, std::string>  success;
  InvalidOperation e;

  _ThriftConnection_transmitInt32ToStringMap_result__isset __isset;

  void __set_success(const std::map<int32_t, std::string> & val) {
    success = val;
  }

  void __set_e(const InvalidOperation& val) {
    e = val;
  }

  bool operator == (const ThriftConnection_transmitInt32ToStringMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_transmitInt32ToStringMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_transmitInt32ToStringMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_transmitInt32ToStringMap_presult__isset {
  _ThriftConnection_transmitInt32ToStringMap_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _ThriftConnection_transmitInt32ToStringMap_presult__isset;

class ThriftConnection_transmitInt32ToStringMap_presult {
 public:


  virtual ~ThriftConnection_transmitInt32ToStringMap_presult() throw() {}

  std::map<int32_t, std::string> * success;
  InvalidOperation e;

  _ThriftConnection_transmitInt32ToStringMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftConnection_sendBool_args__isset {
  _ThriftConnection_sendBool_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendBool_args__isset;

class ThriftConnection_sendBool_args {
 public:

  ThriftConnection_sendBool_args() : value(0) {
  }

  virtual ~ThriftConnection_sendBool_args() throw() {}

  bool value;

  _ThriftConnection_sendBool_args__isset __isset;

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendBool_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendBool_pargs {
 public:


  virtual ~ThriftConnection_sendBool_pargs() throw() {}

  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendByte_args__isset {
  _ThriftConnection_sendByte_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendByte_args__isset;

class ThriftConnection_sendByte_args {
 public:

  ThriftConnection_sendByte_args() : value(0) {
  }

  virtual ~ThriftConnection_sendByte_args() throw() {}

  int8_t value;

  _ThriftConnection_sendByte_args__isset __isset;

  void __set_value(const int8_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendByte_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendByte_pargs {
 public:


  virtual ~ThriftConnection_sendByte_pargs() throw() {}

  const int8_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendInt16_args__isset {
  _ThriftConnection_sendInt16_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendInt16_args__isset;

class ThriftConnection_sendInt16_args {
 public:

  ThriftConnection_sendInt16_args() : value(0) {
  }

  virtual ~ThriftConnection_sendInt16_args() throw() {}

  int16_t value;

  _ThriftConnection_sendInt16_args__isset __isset;

  void __set_value(const int16_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendInt16_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendInt16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendInt16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendInt16_pargs {
 public:


  virtual ~ThriftConnection_sendInt16_pargs() throw() {}

  const int16_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendInt32_args__isset {
  _ThriftConnection_sendInt32_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendInt32_args__isset;

class ThriftConnection_sendInt32_args {
 public:

  ThriftConnection_sendInt32_args() : value(0) {
  }

  virtual ~ThriftConnection_sendInt32_args() throw() {}

  int32_t value;

  _ThriftConnection_sendInt32_args__isset __isset;

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendInt32_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendInt32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendInt32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendInt32_pargs {
 public:


  virtual ~ThriftConnection_sendInt32_pargs() throw() {}

  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendInt64_args__isset {
  _ThriftConnection_sendInt64_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendInt64_args__isset;

class ThriftConnection_sendInt64_args {
 public:

  ThriftConnection_sendInt64_args() : value(0) {
  }

  virtual ~ThriftConnection_sendInt64_args() throw() {}

  int64_t value;

  _ThriftConnection_sendInt64_args__isset __isset;

  void __set_value(const int64_t val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendInt64_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendInt64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendInt64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendInt64_pargs {
 public:


  virtual ~ThriftConnection_sendInt64_pargs() throw() {}

  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendDouble_args__isset {
  _ThriftConnection_sendDouble_args__isset() : value(false) {}
  bool value;
} _ThriftConnection_sendDouble_args__isset;

class ThriftConnection_sendDouble_args {
 public:

  ThriftConnection_sendDouble_args() : value(0) {
  }

  virtual ~ThriftConnection_sendDouble_args() throw() {}

  double value;

  _ThriftConnection_sendDouble_args__isset __isset;

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const ThriftConnection_sendDouble_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendDouble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendDouble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendDouble_pargs {
 public:


  virtual ~ThriftConnection_sendDouble_pargs() throw() {}

  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendString_args__isset {
  _ThriftConnection_sendString_args__isset() : message(false) {}
  bool message;
} _ThriftConnection_sendString_args__isset;

class ThriftConnection_sendString_args {
 public:

  ThriftConnection_sendString_args() : message() {
  }

  virtual ~ThriftConnection_sendString_args() throw() {}

  std::string message;

  _ThriftConnection_sendString_args__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ThriftConnection_sendString_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendString_pargs {
 public:


  virtual ~ThriftConnection_sendString_pargs() throw() {}

  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendStringToStringMap_args__isset {
  _ThriftConnection_sendStringToStringMap_args__isset() : mapContainer(false) {}
  bool mapContainer;
} _ThriftConnection_sendStringToStringMap_args__isset;

class ThriftConnection_sendStringToStringMap_args {
 public:

  ThriftConnection_sendStringToStringMap_args() {
  }

  virtual ~ThriftConnection_sendStringToStringMap_args() throw() {}

  std::map<std::string, std::string>  mapContainer;

  _ThriftConnection_sendStringToStringMap_args__isset __isset;

  void __set_mapContainer(const std::map<std::string, std::string> & val) {
    mapContainer = val;
  }

  bool operator == (const ThriftConnection_sendStringToStringMap_args & rhs) const
  {
    if (!(mapContainer == rhs.mapContainer))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendStringToStringMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendStringToStringMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendStringToStringMap_pargs {
 public:


  virtual ~ThriftConnection_sendStringToStringMap_pargs() throw() {}

  const std::map<std::string, std::string> * mapContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftConnection_sendInt32ToStringMap_args__isset {
  _ThriftConnection_sendInt32ToStringMap_args__isset() : mapContainer(false) {}
  bool mapContainer;
} _ThriftConnection_sendInt32ToStringMap_args__isset;

class ThriftConnection_sendInt32ToStringMap_args {
 public:

  ThriftConnection_sendInt32ToStringMap_args() {
  }

  virtual ~ThriftConnection_sendInt32ToStringMap_args() throw() {}

  std::map<int32_t, std::string>  mapContainer;

  _ThriftConnection_sendInt32ToStringMap_args__isset __isset;

  void __set_mapContainer(const std::map<int32_t, std::string> & val) {
    mapContainer = val;
  }

  bool operator == (const ThriftConnection_sendInt32ToStringMap_args & rhs) const
  {
    if (!(mapContainer == rhs.mapContainer))
      return false;
    return true;
  }
  bool operator != (const ThriftConnection_sendInt32ToStringMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftConnection_sendInt32ToStringMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftConnection_sendInt32ToStringMap_pargs {
 public:


  virtual ~ThriftConnection_sendInt32ToStringMap_pargs() throw() {}

  const std::map<int32_t, std::string> * mapContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftConnectionClient : virtual public ThriftConnectionIf {
 public:
  ThriftConnectionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThriftConnectionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  bool transmitBool(const bool value);
  void send_transmitBool(const bool value);
  bool recv_transmitBool();
  int8_t transmitByte(const int8_t value);
  void send_transmitByte(const int8_t value);
  int8_t recv_transmitByte();
  int16_t transmitInt16(const int16_t value);
  void send_transmitInt16(const int16_t value);
  int16_t recv_transmitInt16();
  int32_t transmitInt32(const int32_t value);
  void send_transmitInt32(const int32_t value);
  int32_t recv_transmitInt32();
  int64_t transmitInt64(const int64_t value);
  void send_transmitInt64(const int64_t value);
  int64_t recv_transmitInt64();
  double transmitDouble(const double value);
  void send_transmitDouble(const double value);
  double recv_transmitDouble();
  void transmitString(std::string& _return, const std::string& message);
  void send_transmitString(const std::string& message);
  void recv_transmitString(std::string& _return);
  void transmitStringToStringMap(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mapContainer);
  void send_transmitStringToStringMap(const std::map<std::string, std::string> & mapContainer);
  void recv_transmitStringToStringMap(std::map<std::string, std::string> & _return);
  void transmitInt32ToStringMap(std::map<int32_t, std::string> & _return, const std::map<int32_t, std::string> & mapContainer);
  void send_transmitInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer);
  void recv_transmitInt32ToStringMap(std::map<int32_t, std::string> & _return);
  void sendBool(const bool value);
  void send_sendBool(const bool value);
  void sendByte(const int8_t value);
  void send_sendByte(const int8_t value);
  void sendInt16(const int16_t value);
  void send_sendInt16(const int16_t value);
  void sendInt32(const int32_t value);
  void send_sendInt32(const int32_t value);
  void sendInt64(const int64_t value);
  void send_sendInt64(const int64_t value);
  void sendDouble(const double value);
  void send_sendDouble(const double value);
  void sendString(const std::string& message);
  void send_sendString(const std::string& message);
  void sendStringToStringMap(const std::map<std::string, std::string> & mapContainer);
  void send_sendStringToStringMap(const std::map<std::string, std::string> & mapContainer);
  void sendInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer);
  void send_sendInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftConnectionProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThriftConnectionIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftConnectionProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitInt16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitInt32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitInt64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitDouble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitStringToStringMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmitInt32ToStringMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendInt16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendInt32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendInt64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendDouble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendStringToStringMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendInt32ToStringMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftConnectionProcessor(boost::shared_ptr<ThriftConnectionIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ThriftConnectionProcessor::process_ping;
    processMap_["transmitBool"] = &ThriftConnectionProcessor::process_transmitBool;
    processMap_["transmitByte"] = &ThriftConnectionProcessor::process_transmitByte;
    processMap_["transmitInt16"] = &ThriftConnectionProcessor::process_transmitInt16;
    processMap_["transmitInt32"] = &ThriftConnectionProcessor::process_transmitInt32;
    processMap_["transmitInt64"] = &ThriftConnectionProcessor::process_transmitInt64;
    processMap_["transmitDouble"] = &ThriftConnectionProcessor::process_transmitDouble;
    processMap_["transmitString"] = &ThriftConnectionProcessor::process_transmitString;
    processMap_["transmitStringToStringMap"] = &ThriftConnectionProcessor::process_transmitStringToStringMap;
    processMap_["transmitInt32ToStringMap"] = &ThriftConnectionProcessor::process_transmitInt32ToStringMap;
    processMap_["sendBool"] = &ThriftConnectionProcessor::process_sendBool;
    processMap_["sendByte"] = &ThriftConnectionProcessor::process_sendByte;
    processMap_["sendInt16"] = &ThriftConnectionProcessor::process_sendInt16;
    processMap_["sendInt32"] = &ThriftConnectionProcessor::process_sendInt32;
    processMap_["sendInt64"] = &ThriftConnectionProcessor::process_sendInt64;
    processMap_["sendDouble"] = &ThriftConnectionProcessor::process_sendDouble;
    processMap_["sendString"] = &ThriftConnectionProcessor::process_sendString;
    processMap_["sendStringToStringMap"] = &ThriftConnectionProcessor::process_sendStringToStringMap;
    processMap_["sendInt32ToStringMap"] = &ThriftConnectionProcessor::process_sendInt32ToStringMap;
  }

  virtual ~ThriftConnectionProcessor() {}
};

class ThriftConnectionProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftConnectionProcessorFactory(const ::boost::shared_ptr< ThriftConnectionIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftConnectionIfFactory > handlerFactory_;
};

class ThriftConnectionMultiface : virtual public ThriftConnectionIf {
 public:
  ThriftConnectionMultiface(std::vector<boost::shared_ptr<ThriftConnectionIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftConnectionMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftConnectionIf> > ifaces_;
  ThriftConnectionMultiface() {}
  void add(boost::shared_ptr<ThriftConnectionIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  bool transmitBool(const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitBool(value);
    }
    return ifaces_[i]->transmitBool(value);
  }

  int8_t transmitByte(const int8_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitByte(value);
    }
    return ifaces_[i]->transmitByte(value);
  }

  int16_t transmitInt16(const int16_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitInt16(value);
    }
    return ifaces_[i]->transmitInt16(value);
  }

  int32_t transmitInt32(const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitInt32(value);
    }
    return ifaces_[i]->transmitInt32(value);
  }

  int64_t transmitInt64(const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitInt64(value);
    }
    return ifaces_[i]->transmitInt64(value);
  }

  double transmitDouble(const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitDouble(value);
    }
    return ifaces_[i]->transmitDouble(value);
  }

  void transmitString(std::string& _return, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitString(_return, message);
    }
    ifaces_[i]->transmitString(_return, message);
    return;
  }

  void transmitStringToStringMap(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mapContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitStringToStringMap(_return, mapContainer);
    }
    ifaces_[i]->transmitStringToStringMap(_return, mapContainer);
    return;
  }

  void transmitInt32ToStringMap(std::map<int32_t, std::string> & _return, const std::map<int32_t, std::string> & mapContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmitInt32ToStringMap(_return, mapContainer);
    }
    ifaces_[i]->transmitInt32ToStringMap(_return, mapContainer);
    return;
  }

  void sendBool(const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendBool(value);
    }
    ifaces_[i]->sendBool(value);
  }

  void sendByte(const int8_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendByte(value);
    }
    ifaces_[i]->sendByte(value);
  }

  void sendInt16(const int16_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendInt16(value);
    }
    ifaces_[i]->sendInt16(value);
  }

  void sendInt32(const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendInt32(value);
    }
    ifaces_[i]->sendInt32(value);
  }

  void sendInt64(const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendInt64(value);
    }
    ifaces_[i]->sendInt64(value);
  }

  void sendDouble(const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendDouble(value);
    }
    ifaces_[i]->sendDouble(value);
  }

  void sendString(const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendString(message);
    }
    ifaces_[i]->sendString(message);
  }

  void sendStringToStringMap(const std::map<std::string, std::string> & mapContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendStringToStringMap(mapContainer);
    }
    ifaces_[i]->sendStringToStringMap(mapContainer);
  }

  void sendInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendInt32ToStringMap(mapContainer);
    }
    ifaces_[i]->sendInt32ToStringMap(mapContainer);
  }

};



#endif
