// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ThriftConnection.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ThriftConnectionHandler : virtual public ThriftConnectionIf {
 public:
  ThriftConnectionHandler() {
    // Your initialization goes here
  }

  bool ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  bool transmitBool(const bool value) {
    // Your implementation goes here
    printf("transmitBool\n");
  }

  int8_t transmitByte(const int8_t value) {
    // Your implementation goes here
    printf("transmitByte\n");
  }

  int16_t transmitInt16(const int16_t value) {
    // Your implementation goes here
    printf("transmitInt16\n");
  }

  int32_t transmitInt32(const int32_t value) {
    // Your implementation goes here
    printf("transmitInt32\n");
  }

  int64_t transmitInt64(const int64_t value) {
    // Your implementation goes here
    printf("transmitInt64\n");
  }

  double transmitDouble(const double value) {
    // Your implementation goes here
    printf("transmitDouble\n");
  }

  void transmitString(std::string& _return, const std::string& message) {
    // Your implementation goes here
    printf("transmitString\n");
  }

  void transmitStringToStringMap(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mapContainer) {
    // Your implementation goes here
    printf("transmitStringToStringMap\n");
  }

  void transmitInt32ToStringMap(std::map<int32_t, std::string> & _return, const std::map<int32_t, std::string> & mapContainer) {
    // Your implementation goes here
    printf("transmitInt32ToStringMap\n");
  }

  void sendBool(const bool value) {
    // Your implementation goes here
    printf("sendBool\n");
  }

  void sendByte(const int8_t value) {
    // Your implementation goes here
    printf("sendByte\n");
  }

  void sendInt16(const int16_t value) {
    // Your implementation goes here
    printf("sendInt16\n");
  }

  void sendInt32(const int32_t value) {
    // Your implementation goes here
    printf("sendInt32\n");
  }

  void sendInt64(const int64_t value) {
    // Your implementation goes here
    printf("sendInt64\n");
  }

  void sendDouble(const double value) {
    // Your implementation goes here
    printf("sendDouble\n");
  }

  void sendString(const std::string& message) {
    // Your implementation goes here
    printf("sendString\n");
  }

  void sendStringToStringMap(const std::map<std::string, std::string> & mapContainer) {
    // Your implementation goes here
    printf("sendStringToStringMap\n");
  }

  void sendInt32ToStringMap(const std::map<int32_t, std::string> & mapContainer) {
    // Your implementation goes here
    printf("sendInt32ToStringMap\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ThriftConnectionHandler> handler(new ThriftConnectionHandler());
  shared_ptr<TProcessor> processor(new ThriftConnectionProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

